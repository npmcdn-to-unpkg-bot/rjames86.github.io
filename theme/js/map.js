// Generated by CoffeeScript 1.10.0
(function() {
  var SpotMap, ce, d;

  d = React.DOM;

  ce = React.createElement;

  SpotMap = React.createFactory(React.createClass({
    displayName: "SpotMap",
    defaultPublicToken: "pk.eyJ1IjoicmphbWVzODYiLCJhIjoiY2ltam53d2F5MDBzZnY4a2cyaWR4Y3pnMyJ9.SM84_1rqm7WiwAl4uO7RIw",
    propTypes: {
      activity: React.PropTypes.object
    },
    getInitialState: function() {
      return {
        coords: null,
        photos: null
      };
    },
    componentDidMount: function() {
      var myMapObj;
      myMapObj = {
        center: [46.8787176, -113.996586],
        zoom: 5.83
      };
      window.mymap = L.map('map', myMapObj);
      $.getJSON("https://dl.dropboxusercontent.com/s/0u9acsrnxqv1w9g/tracking_info.json", (function(_this) {
        return function(res) {
          return _this.setState({
            coords: res
          }, function() {
            _this.generateMapTile();
            return _this.addPolyline();
          });
        };
      })(this));
      return $.getJSON("https://dl.dropboxusercontent.com/s/aekt6faujrfewhm/photo_info.json", (function(_this) {
        return function(res) {
          return _this.setState({
            photos: res
          }, _this.addPhotos);
        };
      })(this));
    },
    parseCoords: function() {
      var i, item, len, ref, ret;
      ret = [];
      ref = this.state.coords;
      for (i = 0, len = ref.length; i < len; i++) {
        item = ref[i];
        ret.push([item.latitude, item.longitude]);
      }
      return ret;
    },
    createPopUps: function() {
      var i, item, len, marker, ref, results;
      ref = this.state.coords;
      results = [];
      for (i = 0, len = ref.length; i < len; i++) {
        item = ref[i];
        results.push(marker = new L.marker([item.latitude, item.longitude]).bindPopup("" + item.datetime, {
          minWith: 100
        }).addTo(window.mymap));
      }
      return results;
    },
    createIcon: function(url) {
      return L.icon({
        iconUrl: url,
        iconSize: [32, 32]
      });
    },
    addPhotos: function() {
      var i, item, len, marker, ref, results;
      ref = this.state.photos;
      results = [];
      for (i = 0, len = ref.length; i < len; i++) {
        item = ref[i];
        if (item.latitude == null) {
          continue;
        }
        results.push(marker = new L.marker([item.latitude, item.longitude], {
          icon: this.createIcon(item.thumbnail)
        }).bindPopup("<img src='" + item.image_url + "'>", {
          minWidth: 320
        }).addTo(window.mymap));
      }
      return results;
    },
    addPolyline: function() {
      this.polyline = L.polyline(this.parseCoords(), {
        color: "red"
      }).addTo(window.mymap);
      return this.createPopUps();
    },
    generateMapTile: function() {
      var first, last, ref;
      if (this.state.coords.length) {
        ref = this.state.coords, first = ref[0], last = ref[ref.length - 1];
        window.mymap.setView(new L.LatLng(last.latitude, last.longitude), 15);
      }
      return L.tileLayer("https://api.mapbox.com/styles/v1/mapbox/streets-v9/tiles/256/{z}/{x}/{y}?access_token=" + this.defaultPublicToken, {
        maxZoom: 18,
        accessToken: this.defaultPublicToken
      }).addTo(window.mymap);
    },
    render: function() {
      return d.div({
        className: "map-container",
        style: {
          "height": window.innerHeight + "px"
        }
      }, d.div({
        id: "map"
      }));
    }
  }));

  $(function() {
    var react_content;
    react_content = document.getElementById('widget');
    return ReactDOM.render(ce(SpotMap, null, null), react_content);
  });

}).call(this);
